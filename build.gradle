group = 'com.bcs.bm.service'

rootProject.wrapper.gradleVersion = '5.4.1'
version = file('version.txt').exists() ? file('version.txt').text.trim() : "1.0.0"

buildscript {
    ext {
        servicePackage = 'com.bcs.bm.catalog_of_instruments_rudata'
        servicePackageSlashes = servicePackage.replace('.', '/')

        ver = [
                bmDependencies       : 'latest.release',
                springBoot           : '2.1.5.RELEASE',
                dependencyManagement : '1.0.7.RELEASE',
                sonarqube            : '2.7.1',
                protobufPlugin       : '0.8.6',
                bmGradleVersionPlugin: '3.2.32',
                lombokPlugin         : '3.6.4'
        ]
    }

    repositories {
        maven { url LOCAL_REPO }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$ver.dependencyManagement",
                "org.springframework.boot:spring-boot-gradle-plugin:$ver.springBoot",
                "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$ver.sonarqube",
                "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.3",
                "com.bcs.bm.gradle:bm-gradle-version-plugin:$ver.bmGradleVersionPlugin",
                "com.google.protobuf:protobuf-gradle-plugin:$ver.protobufPlugin",
                "io.freefair.gradle:lombok-plugin:$ver.lombokPlugin"
    }
}

ext {
    defaultEncoding = 'UTF-8'

    releaseName = System.getenv("releaseName") ?: System.getProperty("releaseName") ?: "0"
    branch = System.getenv("branch") ?: System.getProperty("branch") ?: "0"
    revision = System.getenv("buildRev") ?: System.getProperty("buildRev") ?: ""
}

allprojects {
    repositories {
        rootProject.buildscript.repositories.each {
            repositories.add(it)
        }
    }

    apply plugin: 'jacoco'
}

apply plugin: 'idea'
apply plugin: 'org.sonarqube'

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: com.bcs.bm.gradle.version.VersionPlugin
    apply plugin: "io.freefair.lombok"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.encoding = defaultEncoding
        options.compilerArgs = ['-parameters', '-Xlint:unchecked']
    }

    compileTestJava {
        options.encoding = defaultEncoding
        options.compilerArgs = ['-parameters', '-Xlint:unchecked']
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    publishing {
        repositories {
            maven {
                url LOCAL_UPLOAD_REPO
                credentials {
                    username LOCAL_USER
                    password LOCAL_PASSWORD
                }
            }
        }
    }

    tasks.withType(Javadoc) {
        options.encoding = defaultEncoding
        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.addBooleanOption("Xdoclint:all").setValue(true)
    }

    test {

        systemProperty 'spring.profiles.active', 'test'
        systemProperty 'user.language', 'ru'
        systemProperty 'user.country', 'RU'

        jacoco {
            excludes = [
                    servicePackageSlashes + '/**/BizTalkSource.*',
                    servicePackageSlashes + '/**/*AutoConfiguration.*',
                    servicePackageSlashes + '/api/Api.*',
                    servicePackageSlashes + '/ServiceApplication.*',
            ]
        }

        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            excludeTags 'inttest'
        }
        reports {
            junitXml.enabled true
            html.enabled false
        }

        failFast = System.getProperty('failFast') != null
        maxParallelForks = 1
        //forkEvery = 1
        include servicePackageSlashes + '/**/*Test.class'
//        minHeapSize = "1600m"
//        maxHeapSize = "2g"

        testLogging {
            events 'skipped', 'failed'
            exceptionFormat = 'full'

            debug {
                events "started", "passed", "skipped", "failed"
            }

            info {
                events "passed", "skipped", "failed"
            }
        }

    }

}

sonarqube {
    properties {
        property 'sonar.sourceEncoding', defaultEncoding
        property 'sonar.java.source property', '1.11'
        property 'sonar.junit.reportPaths', "$buildDir/test-results/test"
        property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
        properties['sonar.coverage.exclusions'] = '**/' + servicePackageSlashes + '/**/*AutoConfiguration.*, ' +
                '**/' + servicePackageSlashes + '/ServiceApplication.*' +
                '**/' + servicePackageSlashes + '/client/grpc/**'
    }
}

idea {

    if (parent == null) {
        project {
            languageLevel = '1.11'
            vcs = 'Git'
        }
    }

    module {
        excludeDirs += file('.idea')
    }
}
